module cclink_ie_field_basic;

import zeek;
import spicy;

public type Packet = unit {
    reserved1:  uint16 &convert=Reserved1($$);
    switch ( self.reserved1 ) {
        Reserved1::CyclicDataReq   -> rq:   CyclicDataReq;
        Reserved1::CyclicDataRes   -> rs:   CyclicDataRes;
        *                    -> unk:   Unknown;
        };        

    on %done { print self; }
};

type Reserved1 = enum {
    CyclicDataReq = 0x5000,
    CyclicDataRes = 0xd000,
};
# --------------------------------
# cc_link_ief_basicの基本リクエスト
type CyclicDataReq = unit {
    reserved2:  bytes &size=1;
    reserved3:  bytes &size=1;
    reserved4:  bytes &size=2;
    reserved5:  bytes &size=1;
    dl:         uint16 &byte-order=spicy::ByteOrder::Little;
    reserved6:  bytes &size=2;
    command:    bytes &size=2;
    subCommand: bytes &size=2;
    reqData:   ReqCyclicData;

    on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicの基本リクエストのデータ部
type ReqCyclicData = unit {
    protocolVer:  bytes &size=2;
    reserved1:  bytes &size=2;
    offsetAddrInfo:  OffsetAddrInfoRQ;
    masterNoticeInfo:  MasterNoticeInfoRQ;
    cyclicInfo: CyclicInfoRQ;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicの基本リクエストのデータ部の中身
type OffsetAddrInfoRQ = unit {
    cyclicInfoOffsetAddr:  bytes &size=2;
    reserved2:  bytes &size=14;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicの基本リクエストのデータ部の中身
type MasterNoticeInfoRQ = unit {
    protocolVer1:  bytes &size=12;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicのの基本リクエストのデータ部の中身
type CyclicInfoRQ = unit {
    masterID:  bytes &size=4;
    groupNo:  bytes &size=1;
    reserved3:  bytes &size=1;
    frameSequenceNo:  bytes &size=2;
    timeoutValue:  bytes &size=2;
    parallelOffTimeoutCount:  bytes &size=2;
    parameterNo:  bytes &size=2;
    slaveTotalOccupiedStationCount:  uint16 &byte-order=spicy::ByteOrder::Little;
    cyclicTransmissionState:  bytes &size=2;
    reserved:  bytes &size=2;
    slaveNo_slaveID:  bytes &size=self.slaveTotalOccupiedStationCount * 4;
    cyclicDataRWw:  bytes &size=self.slaveTotalOccupiedStationCount * 64;
    cyclicDataRY:  bytes &size=self.slaveTotalOccupiedStationCount * 8;
    demo: bytes &eod;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};
# --------------------------------

# --------------------------------
# cc_link_ief_basicの基本レスポンス
type CyclicDataRes = unit {
    reserved2:  bytes &size=1;
    reserved3:  bytes &size=1;
    reserved4:  bytes &size=2;
    reserved5:  bytes &size=1;
    dl:         uint16 &byte-order=spicy::ByteOrder::Little;
    reserved6:  bytes &size=2;
    resData:    ResCyclicData(self.dl);

    on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicの基本レスポンスのデータ部
type ResCyclicData = unit(dl: uint16) {
    protocolVer:  bytes &size=2;
    endCode:  bytes &size=2;
    offsetAddrInfo:  OffsetAddrInfoRS;
    slaveNoticeInfo:  SlaveNoticeInfo;
    cyclicInfo: CyclicInfoRS(dl);

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicのデータ部の中身
type OffsetAddrInfoRS = unit {
    cyclicInfoOffsetAddr:  bytes &size=2;
    reserved1:  bytes &size=14;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicのデータ部の中身
type SlaveNoticeInfo = unit {
    protocolVer1:  bytes &size=20;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};

# cc_link_ief_basicのデータ部の中身
type CyclicInfoRS = unit(dl: uint16) {
    slaveID:  bytes &size=4;
    groupNo:  bytes &size=1;
    reserved2:  bytes &size=1;
    frameSequenceNo:  bytes &size=2;
    cyclicDataRWr:  bytes &size=((dl - 50) / 72) * 64;
    cyclicDataRX:  bytes &size=((dl - 50) / 72) * 8;

    # on %done { print self; zeek::confirm_protocol();}
    # on %done { print self;}
};
# --------------------------------

type Unknown = unit {
    data:          bytes &eod;

    # on %done { print self; }
};