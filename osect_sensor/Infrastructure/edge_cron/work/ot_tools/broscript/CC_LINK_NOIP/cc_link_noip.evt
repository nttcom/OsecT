packet analyzer spicy::NO_IP:
    parse with NO_IP::Packet;

# field 伝送制御フレーム
# -----------------------------------
on NO_IP::Packet::tokenM -> event raw::tokenM($packet, self.tokenM.dataType, self.tokenM.protocolVerType, self.tokenM.srcNodeNumber, self.tokenM.nodeId);
on NO_IP::Packet::persuasion -> event raw::persuasion($packet, self.persuasion.dataType, self.persuasion.protocolVerType, self.persuasion.srcNodeNumber, self.persuasion.nodeType);
on NO_IP::Packet::testData -> event raw::testData($packet, self.testData.dataType, self.testData.protocolVerType, self.testData.srcNodeNumber, self.testData.nodeType);
on NO_IP::Packet::testDataAck -> event raw::testDataAck($packet, self.testDataAck.dataType, self.testDataAck.protocolVerType, self.testDataAck.srcNodeNumber, self.testDataAck.nodeType);
on NO_IP::Packet::setup -> event raw::setup($packet, self.setup.dataType, self.setup.protocolVerType, self.setup.srcNodeNumber, self.setup.nodeId);
on NO_IP::Packet::setupAck -> event raw::setupAck($packet, self.setupAck.dataType, self.setupAck.protocolVerType, self.setupAck.srcNodeNumber);
on NO_IP::Packet::myStatus -> event raw::myStatus($packet, self.myStatus.dataType, self.myStatus.protocolVerType, self.myStatus.srcNodeNumber, self.myStatus.nodeType, self.myStatus.nodeId, self.myStatus.syncFlag);
# -----------------------------------

# field 同期フレーム
# -----------------------------------
on NO_IP::Packet::measure -> event raw::measure($packet, self.measure.dataType, self.measure.protocolVerType, self.measure.srcNodeNumber, self.measure.nodeId);
on NO_IP::Packet::measureAck -> event raw::measureAck($packet, self.measureAck.dataType, self.measureAck.protocolVerType, self.measureAck.srcNodeNumber, self.measureAck.nodeId);
on NO_IP::Packet::offset -> event raw::offset($packet, self.offset.dataType, self.offset.protocolVerType, self.offset.srcNodeNumber, self.offset.nodeId);
on NO_IP::Packet::update -> event raw::update($packet, self.update.dataType, self.update.protocolVerType, self.update.srcNodeNumber, self.update.nodeId);
# -----------------------------------

# field サイクリック伝送フレーム
# -----------------------------------
on NO_IP::Packet::cyclicDataRWw -> event raw::cyclicDataRWw($packet, self.cyclicDataRWw.dataType, self.cyclicDataRWw.protocolVerType, self.cyclicDataRWw.srcNodeNumber, self.cyclicDataRWw.nodeId);
on NO_IP::Packet::cyclicDataRY -> event raw::cyclicDataRY($packet, self.cyclicDataRY.dataType, self.cyclicDataRY.protocolVerType, self.cyclicDataRY.srcNodeNumber, self.cyclicDataRY.nodeId);
on NO_IP::Packet::cyclicDataRWr -> event raw::cyclicDataRWr($packet, self.cyclicDataRWr.dataType, self.cyclicDataRWr.protocolVerType, self.cyclicDataRWr.srcNodeNumber, self.cyclicDataRWr.nodeId);
on NO_IP::Packet::cyclicDataRX -> event raw::cyclicDataRX($packet, self.cyclicDataRX.dataType, self.cyclicDataRX.protocolVerType, self.cyclicDataRX.srcNodeNumber, self.cyclicDataRX.nodeId);
# -----------------------------------

# field トランジェント伝送フレーム
# -----------------------------------
on NO_IP::Packet::transient1 -> event raw::transient1($packet, self.transient1.dataType, self.transient1.protocolVerType, self.transient1.srcNodeNumber, NO_IP::arrangement_transient1(self.transient1), self.transient1.connectionInfo, self.transient1.nodeId);
on NO_IP::Packet::transientAck -> event raw::transientAck($packet, self.transientAck.dataType, self.transientAck.protocolVerType, self.transientAck.srcNodeNumber, self.transientAck.connectionInfo, self.transientAck.nodeId);
on NO_IP::Packet::transient2 -> event raw::transient2($packet, self.transient2.dataType, self.transient2.protocolVerType, self.transient2.srcNodeNumber, self.transient2.connectionInfo, self.transient2.nodeId, self.transient2.ct);
on NO_IP::Packet::paramCheck -> event raw::paramCheck($packet, self.paramCheck.dataType, self.paramCheck.protocolVerType, self.paramCheck.srcNodeNumber, self.paramCheck.connectionInfo, self.paramCheck.nodeId);
on NO_IP::Packet::parameter -> event raw::parameter($packet, self.parameter.dataType, self.parameter.protocolVerType, self.parameter.srcNodeNumber, self.parameter.connectionInfo, self.parameter.nodeId);
on NO_IP::Packet::c_timer -> event raw::c_timer($packet, self.c_timer.dataType, self.c_timer.protocolVerType, self.c_timer.srcNodeNumber);
on NO_IP::Packet::ipTransient -> event raw::ipTransient($packet, self.ipTransient.dataType, self.ipTransient.protocolVerType, self.ipTransient.srcNodeNumber, self.ipTransient.connectionInfo, self.ipTransient.nodeId);
# -----------------------------------

# control 伝送制御フレーム
# -----------------------------------
on NO_IP::Packet::connect -> event raw::connect($packet, self.connect.c_priority, self.connect.srcNodeNumber);
on NO_IP::Packet::connectAck -> event raw::connectAck($packet, self.connectAck.c_priority, self.connectAck.srcNodeNumber);
on NO_IP::Packet::scan -> event raw::scan($packet, self.scan.c_priority, self.scan.srcNodeNumber);
on NO_IP::Packet::collect -> event raw::collect($packet, self.collect.c_priority, self.collect.srcNodeNumber);
on NO_IP::Packet::select -> event raw::select($packet, self.select.c_priority, self.select.srcNodeNumber);
on NO_IP::Packet::launch -> event raw::launch($packet, self.launch.c_priority, self.launch.srcNodeNumber);
on NO_IP::Packet::token -> event raw::token($packet, self.token.c_priority, self.token.srcNodeNumber);
on NO_IP::Packet::dummy -> event raw::dummy($packet, self.dummy.c_priority, self.dummy.srcNodeNumber);
on NO_IP::Packet::nTNTest -> event raw::nTNTest($packet, self.nTNTest.c_priority, self.nTNTest.srcNodeNumber);
# -----------------------------------

# control サイクリック伝送フレーム
# -----------------------------------
on NO_IP::Packet::cyclicDataW -> event raw::cyclicDataW($packet, self.cyclicDataW.c_priority, self.cyclicDataW.srcNodeNumber);
on NO_IP::Packet::cyclicDataB -> event raw::cyclicDataB($packet, self.cyclicDataB.c_priority, self.cyclicDataB.srcNodeNumber);
on NO_IP::Packet::cyclicDataOut1 -> event raw::cyclicDataOut1($packet, self.cyclicDataOut1.c_priority, self.cyclicDataOut1.srcNodeNumber);
on NO_IP::Packet::cyclicDataOut2 -> event raw::cyclicDataOut2($packet, self.cyclicDataOut2.c_priority, self.cyclicDataOut2.srcNodeNumber);
on NO_IP::Packet::cyclicDataIn1 -> event raw::cyclicDataIn1($packet, self.cyclicDataIn1.c_priority, self.cyclicDataIn1.srcNodeNumber);
on NO_IP::Packet::cyclicDataIn2 -> event raw::cyclicDataIn2($packet, self.cyclicDataIn2.c_priority, self.cyclicDataIn2.srcNodeNumber);
# -----------------------------------
