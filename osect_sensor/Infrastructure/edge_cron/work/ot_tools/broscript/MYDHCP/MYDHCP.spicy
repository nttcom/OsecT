# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.

module MYDHCP;

# RFC-2131: DHCP message, Table 1.
public type Message = unit {
    op: uint8 &convert=Opcode($$);
    htype: uint8 &convert=HardwareType($$);
    hlen: uint8;
    hops: uint8;
    xid: uint32;
    secs: uint16 &convert=cast<interval>($$);
    flags: uint16;
    ciaddr: addr &ipv4;
    yiaddr: addr &ipv4;
    siaddr: addr &ipv4;
    giaddr: addr &ipv4;
    chaddr: bytes &size=16;
    sname: bytes &size=64 &convert=$$.split1(b"\0")[0].decode();
    file_n: bytes &size=128 &convert=$$.split1(b"\0")[0].decode();
    options: Options;

    # Correct encoding for chaddr, the client hardware address
    var chaddr_str: string;
    on chaddr {
        # TODO(bbannier): Perform this conversion on the fly as part of parsing
        # `chaddr` once https://github.com/zeek/spicy/issues/1261 is fixed.

        # Iterate up to hlen, the hardware address length given in the message
        local i = 0;
        while ( i < self.hlen ) {
            if ( i > 0 ) {
                self.chaddr_str = self.chaddr_str + ":";
            }
            self.chaddr_str = self.chaddr_str + ("%02x" % *self.chaddr.at(i));
            ++i;
        }
    }
    # on %done { print self; }
};

# RFC-2131: DHCP message, Table 1, op.
type Opcode = enum {
    BOOTREQUEST = 0x01,
    BOOTREPLY = 0x02
};

# RFC-1700: Adress Resolution Protocol Parameters, Hardware Type.
type HardwareType = enum {
    ETHERNET_10MB = 0x01,
    EXPERIMENTAL_ETHERNET_3MB = 0x02,
    AMATEUR_RADIO_AX_25 = 0x03,
    PROTEON_PRONET_TOKEN_RING = 0x04,
    CHAOS = 0x05,
    IEEE_802_NETWORKS = 0x06,
    ARCNET = 0x07,
    HYPERCHANNEL = 0x08,
    LANSTAR = 0x09
};

# RFC-1497: BOOTP Vendor Information Format.
type Options = unit {
    : b"\x63\x82\x53\x63"; # Magic Cookie.
    options: Option[];
};

# RFC-1533: DHCP Options.
type Option = unit {
    code: uint8 &convert=OptionCode($$);
    switch ( self.code ) {
        OptionCode::PAD, OptionCode::END -> : void {}
        OptionCode::TIME_OFFSET -> {
            : uint8;
            time_offset: int32;
        }
        OptionCode::ROUTER -> {
            len: uint8;
            routers: addr[self.len/4] &ipv4; # `len` is always a multiple of 4.
        }
        OptionCode::TIME_SERVER -> {
            len: uint8;
            time_servers: addr[self.len/4] &ipv4; # `len` is always a multiple of 4.
        }
        OptionCode::NAME_SERVER -> {
            len: uint8;
            name_servers: addr[self.len/4] &ipv4; # `len` is always a multiple of 4.
        }
        OptionCode::DOMAIN_NAME_SERVER -> {
            len: uint8;
            domain_name_servers: addr[self.len/4] &ipv4; # `len` is always a multiple of 4.
        }
        OptionCode::HOST_NAME -> {
            len: uint8;
            host_name: bytes &size=self.len &convert=$$.decode();
            on %done { print self; }
        }
        OptionCode::DOMAIN_NAME -> {
            len: uint8;
            domain_name: bytes &size=self.len &convert=$$.decode();
        }
        OptionCode::FORWARDING -> {
            : uint8;
            forwarding: uint8;
        }
        OptionCode::BROADCAST_ADDRESS -> {
            : uint8;
            broadcast_address: addr &ipv4;
        }
        OptionCode::NETWORK_TIME_PROTOCOL_SERVER -> {
            len: uint8;
            network_time_protocol_servers: addr[self.len/4] &ipv4; # `len` is always a multiple of 4.
        }
        OptionCode::VENDOR_SPECIFIC_INFORMATION -> {
            len : uint8;
            vendor_specific_information: bytes &size=self.len &convert=$$.decode();
        }
        OptionCode::NETBIOS_OVER_TCPIP_NAME_SERVER -> {
            len: uint8;
            netbios_over_tcpip_name_servers: addr[self.len/4] &ipv4; # `len` is always a multiple of 4.
        }
        OptionCode::REQUESTED_ADDRESS -> {
            : uint8;
            requested_address: addr &ipv4;
        }
        OptionCode::IP_ADDRESS_LEASE_TIME -> {
            : uint8;
            ip_address_lease_time: uint32;
        }
        OptionCode::MESSAGE_TYPE -> {
            : uint8;
            message_type: uint8 &convert=MessageType($$);
        }
        OptionCode::SERVER_IDENTIFIER -> {
            : uint8;
            server_identifier: addr &ipv4;
        }
        OptionCode::PARAMETER_REQUESTS -> {
            len: uint8;
            request_values: uint8[self.len] &convert=[OptionCode(x) for x in $$];
        }
        OptionCode::MESSAGE -> {
            len : uint8;
            message: bytes &size=self.len &convert=$$.decode(hilti::Charset::ASCII);
        }
        OptionCode::MAXIMUM_DHCP_MESSAGE_SIZE -> {
            : uint8;
            maximum_dhcp_message_size: uint16;
        }
        OptionCode::RENEWAL_TIME_VALUE -> {
            : uint8;
            renewal_time_value: uint32;
        }
        OptionCode::REBIND_TIME_VALUE -> {
            : uint8;
            rebind_time_value: uint32;
        }
        OptionCode::CLASS_IDENTIFIER -> {
            len: uint8;
            class_identifier: bytes &size=self.len &convert=$$.decode();
        }
        OptionCode::CLIENT_IDENTIFIER -> {
            len: uint8;
            client_type: uint8 &convert=HardwareType($$);
            client_identifier: bytes &size=(self.len - 1);
        }
        OptionCode::USER_CLASS -> {
            len: uint8;
            user_class:bytes &size=self.len;
        }
        * -> : UnparsedOption(self.code);
    };
    # on %done { print self; }
};

type OptionCode = enum {
    PAD = 0,
    SUBNET_MASK = 1,         # TODO(bbannier): implement handling, see https://tools.ietf.org/html/rfc950.
    TIME_OFFSET = 2,
    ROUTER = 3,
    TIME_SERVER = 4,
    NAME_SERVER = 5,
    DOMAIN_NAME_SERVER = 6,
    HOST_NAME = 12,
    DOMAIN_NAME = 15,
    FORWARDING = 19,
    BROADCAST_ADDRESS = 28,
    NETWORK_TIME_PROTOCOL_SERVER = 42,
    VENDOR_SPECIFIC_INFORMATION = 43,
    NETBIOS_OVER_TCPIP_NAME_SERVER = 44,
    REQUESTED_ADDRESS = 50,
    IP_ADDRESS_LEASE_TIME = 51,
    MESSAGE_TYPE = 53,
    SERVER_IDENTIFIER = 54,
    PARAMETER_REQUESTS = 55,
    MESSAGE = 56,
    MAXIMUM_DHCP_MESSAGE_SIZE = 57,
    RENEWAL_TIME_VALUE = 58,
    REBIND_TIME_VALUE = 59,
    CLASS_IDENTIFIER = 60,
    CLIENT_IDENTIFIER = 61,
    USER_CLASS = 77,
    END = 255
};

type MessageType = enum {
    DISCOVER = 0x01,
    OFFER    = 0x02,
    REQUEST  = 0x03,
    DECLINE  = 0x04,
    ACK      = 0x05,
    NAK      = 0x06,
    RELEASE  = 0x07
};

type UnparsedOption = unit(code: OptionCode) {
    len: uint8 if ( code != OptionCode::PAD && code != OptionCode::END );
    data: bytes &size=self.len if ( code != OptionCode::PAD && code != OptionCode::END );
};
